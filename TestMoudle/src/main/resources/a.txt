package weaver.formmode.task;

import com.api.cube.util.CubeCipherUitl;
import com.api.cube.util.CubeUtil;
import com.engine.common.biz.EncryptConfigBiz;
import com.engine.cube.biz.PageExpandHelper;
import com.engine.cube.cmd.list.SaveShowmethodSingleCmd;
import com.weaver.formmodel.util.StringHelper;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import weaver.conn.RecordSet;
import weaver.conn.RecordSetTrans;
import weaver.file.Prop;
import weaver.formmode.FormModeConfig;
import weaver.formmode.customjavacode.CustomJavaCodeRun;
import weaver.formmode.data.FieldInfo;
import weaver.formmode.data.ModeDataApproval;
import weaver.formmode.excel.ExpExcelUtil;
import weaver.formmode.excel.ModeCacheManager;
import weaver.formmode.excel.ModeCacheManagerThread;
import weaver.formmode.exttools.impexp.exp.service.InitUuidService;
import weaver.formmode.log.FormmodeLog;
import weaver.formmode.service.CommonConstant;
import weaver.formmode.service.RemindJobService;
import weaver.formmode.setup.ModeSetUtil;
import weaver.formmode.task.action.TaskAllJob;
import weaver.formmode.task.trigger.TriggerTime;
import weaver.formmode.task.trigger.TriggerTimeFactory;
import weaver.formmode.virtualform.VirtualFormHandler;
import weaver.general.*;
import weaver.hrm.User;
import weaver.hrm.company.DepartmentComInfo;
import weaver.hrm.company.SubCompanyComInfo;
import weaver.interfaces.schedule.QuartzAPIImpl;
import weaver.servicefiles.DataSourceXML;
import weaver.system.SysUpgradeCominfo;
import weaver.systeminfo.SystemEnv;
import weaver.workflow.form.FormManager;

import javax.servlet.http.HttpServletRequest;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.stream.Collectors;

import weaver.hrm.resource.ResourceComInfo;

public class TaskService extends FormmodeLog implements Runnable {
	private static List<String> runTimeTaskList = new ArrayList<String>();
	
	private static RemindJobService remindJobService = new RemindJobService();
	
	private int billid = 0;//即时提醒保存参数--单号id
	private String billidVirtual;//即时提醒保存参数--单号id(虚拟表单主键可能字符串)
	private int modeid = 0;//即时提醒保存参数--模块id
	private int expandid = 0;//页面扩展id，如果页面扩展id不等于0则是页面扩展按钮，否则执行新建保存上的提醒配置
	private String action = "";
	
	private User currentUser = null;
    
	//判断是否为集群 是否为主节点
	private Prop prop = Prop.getInstance();
	
    private String mainControlIp = prop.getPropValue(GCONST.getConfigFile() , "MainControlIP");
    
    private ArrayList<String> hostIps = null;
    
    boolean isCulster=false;  //是否集群
    
    boolean isMainIp=false;  //是否主节点
    /**
	 * 是否是知识树评论提醒(是则不需要添加创建人和创建时间)
	 */
	private boolean isKtreeReply=false;
	public void doAction(HttpServletRequest request){
		synchronized (runTimeTaskList) {
			String operation = Util.null2String(request.getParameter("operation"));
			String id = Util.null2String(request.getParameter("id"));
			if(id.equals("")){
				id = Util.null2String(request.getAttribute("id"));
			}
			if(operation.equals("")){
				operation = Util.null2String(request.getAttribute("operation"));
			}
			Map remindJob = remindJobService.getRemindJobById(Util.getIntValue(id));
			if(operation.equals("delete")){//删除
				if(isInRunList(id)){
					stopTask(remindJob);
					runTimeTaskList.remove(id);
					//删除对应的提醒数据
				}
			}else{
				String isenable = Util.null2String(remindJob.get("isenable"));
				
				if(isInRunList(id)){//运行
					if(isenable.equals("1")){//启用
						modifyTask(remindJob);
					}else{//不启用
						stopTask(remindJob);
						runTimeTaskList.remove(id);
					}
				}else{//未运行
					if(isenable.equals("1")){//启用
						startTask(remindJob);
						runTimeTaskList.add(id);
					}else{
						return;
					}
				}
			}
		}
	}
	
	private boolean isInRunList(String remindid){
		boolean flag = false;
		for(int i=0;i<runTimeTaskList.size();i++){
			if(runTimeTaskList.get(i).equals(remindid)){
				return true;
			}
		}
		return flag;
	}
	
	/**
	 * 停止-删除工作
	 * @param remindJob
	 */
	public void stopTask(Map remindJob) {
		try {
			int id = Util.getIntValue(remindJob.get("id")+"");
			if (remindJob.size()==0) {
				return;
			} else {
				TaskManager.getInstance().stopTaskByName(id+"");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 开始
	 * @param remindJob
	 */
	public void startTask(Map remindJob) {
			if (remindJob.size()==0) {
				return;
			} else {
				try {
					int id = Util.getIntValue(remindJob.get("id")+"");
					int triggerway =  Util.getIntValue(remindJob.get("triggerway")+"");
					int triggertype =  Util.getIntValue(remindJob.get("triggertype")+"");
					TriggerTime triggerTime = null ;
					if(triggerway==1){//简单规则
						triggerTime = TriggerTimeFactory.getTriggerTime(triggertype);
					}else{//表达式
						triggerTime = TriggerTimeFactory.getTriggerTime(TaskTimeParser.EXPRESSION_TIME);
					}
					setAttributeTrigger(remindJob, triggerTime);
					BaseTask btask = new BaseTask();
					btask.setTaskName(id+"");
					btask.setTriggerTime(triggerTime);
					btask.addData("id", id+"");
					TaskAllJob job = new TaskAllJob();
					job.setRemindJobId(id);
					if(job!=null){
						btask.setJob(job);
						TaskManager.getInstance().modifyTask(btask);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
	}
	
	public void setAttributeTrigger(Map remindJob,TriggerTime triggerTime){
		String id = Util.null2String(remindJob.get("id"));
		String triggerexpression = Util.null2String(remindJob.get("triggerexpression"));
		int intervalTime = Util.getIntValue(remindJob.get("triggercycletime")+"", 1);
		String week = Util.null2String(remindJob.get("weeks"));
		String month = Util.null2String(remindJob.get("months"));
		String day = Util.null2String(remindJob.get("days"));
		String timespot = Util.null2String(remindJob.get("timespot"));
		
		triggerTime.setTriggerName(id);
		triggerTime.setIntervalTime(intervalTime);
		triggerTime.setExpression(triggerexpression);
		triggerTime.setWeek(week);
		triggerTime.setMonth(month);
		triggerTime.setDay(day);
		triggerTime.setTimespot(timespot);
	}
	
	/**
	 * 修改
	 * @param remindJob
	 */
	public void modifyTask(Map remindJob) {
			if (remindJob.size()==0) {
				return;
			} else {
				try {
					int id = Util.getIntValue(remindJob.get("id")+"");
					int triggerway =  Util.getIntValue(remindJob.get("triggerway")+"");
					int triggertype =  Util.getIntValue(remindJob.get("triggertype")+"");
					TriggerTime triggerTime = null ;
					if(triggerway==1){//简单规则
						triggerTime = TriggerTimeFactory.getTriggerTime(triggertype);
					}else{//表达式
						triggerTime = TriggerTimeFactory.getTriggerTime(TaskTimeParser.EXPRESSION_TIME);
					}
					setAttributeTrigger(remindJob, triggerTime);
					BaseTask btask = new BaseTask();
					btask.setTaskName(id+"");
					btask.setTriggerTime(triggerTime);
					btask.addData("id", id+"");
					TaskAllJob job = new TaskAllJob();
					job.setRemindJobId(id);
					if(job!=null){
						btask.setJob(job);
						TaskManager.getInstance().modifyTask(btask);
					}
								
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
	}
	
	/**
	 * 仅即时提醒(表单建模新建保存时)使用线程，其他方式不要使用线程
	 */
	@Override
	public void run() {
		checkEndUpgrade(1000);
		if(action.equals("create")){
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			doModeRemind();
		}else if(action.equals("init")){
			try {
				new ModeCacheManagerThread().startThreadLoadBrowsder();
			} catch (Exception e) {
				new weaver.general.BaseBean().writeLog(e);
			}
			
			try {
				changeRemindWay();
			} catch (Exception e) {
				writeLog(e);
			}
			try {
				castDqtx2Sqlwhere("");//sqlwherejson字段为空的，一律转换掉sqlwhere的形式
			} catch (Exception e) {
				writeLog(e);
			}
			try {
				if(!"".equals(mainControlIp)){
	                 isCulster=true;
				     hostIps = InitServer.getRealIp();
	                 if(hostIps.contains(mainControlIp)){
	                     isMainIp=true;
	                 }
	            }
				initAllRemind();
			} catch (Exception e) {
				writeLog(e);
			}

			try {
				if(!isCulster||isMainIp) {
					//初始化草稿、导出卡片页面扩展
					PageExpandHelper pageExpandHelper = new PageExpandHelper();
					pageExpandHelper.initPageexpand("13,14");
					//初始化显示转换
					SaveShowmethodSingleCmd saveShowmethodSingleCmd = new SaveShowmethodSingleCmd(null,null);
					saveShowmethodSingleCmd.convertOldData();
				}
			} catch (Exception e) {
				writeLog(e);
			}


			try {
				//初始化车辆信息
				ModeSetUtil modeSetUtil = new ModeSetUtil();
				modeSetUtil.initCarInfo();
				//初始化历史数据的未读、反馈标识
				CubeUtil.initSearchEnable();
			} catch (Exception e) {
				writeLog(e);
			}

			try {
				//初始化建模表cubeuuid
				InitUuidService initUuidService = new InitUuidService("1");
				Thread t = new  Thread(initUuidService);
				t.start();
			} catch (Exception e) {
				writeLog(e);
			}
		}
		
	}
	
    /**
     * 升级是否执行完毕
     * @param sleepTime 休眠时间
     */
    private void checkEndUpgrade(int sleepTime) {
        try {
            while (!SysUpgradeCominfo.getUpgradeFinished()) {// 升级进行中
            	//writeLog("升级进行中,sleep...");
                Thread.sleep(sleepTime);// 线程休眠1秒
                //checkEndUpgrade(sleepTime);
            }
        } catch (Exception e) {
        	writeLog(e);
            e.printStackTrace();
        }
    }
	
	
	private void changeRemindWay(){
		//2：短信提醒 
		//3：邮件提醒 
		//4：流程提醒
		//5：微信云桥提醒
		RecordSet rs = new RecordSet();
		String sql = "select 1 from mode_remindjob where remindway in (2,3,4,5)";
		rs.execute(sql);
		if(rs.getCounts()>0){
			sql = "update mode_remindjob set remindSMS=1,remindway=null where remindway=2 ";
			boolean f  = rs.execute(sql);
			if(f){
				sql = "update mode_remindjob set remindEmail=1,remindway=null where remindway=3 ";
				rs.execute(sql);
				sql = "update mode_remindjob set remindWorkflow=1,remindway=null where remindway=4 ";
				rs.execute(sql);
				sql = "update mode_remindjob set remindWeChat=1,remindway=null where remindway=5 ";
				rs.execute(sql);
				
				try {
					FormModeConfig formModeConfig = new FormModeConfig();
					formModeConfig.writeProValue("isChangeRemindWay", "1");
					writeLog("初始化提醒，更改提醒方式成功");
				} catch (Exception e) {
					writeLog("初始化提醒，更改提醒方式失败:"+e.getMessage());
					e.printStackTrace();
				}
			}else{
				writeLog("初始化提醒，更改提醒方式出现错误：sql==>"+sql);
			}
		}
		
		sql = "update mode_remindjob set sendertype=senderfield,senderfield=null where senderfield>0 and sendertype=3 "; 
		rs.execute(sql);
		
		sql = "update mode_remindjob set senderfield=null where sendertype in (1,2)  "; 
		rs.execute(sql);
		
	}
	
	
	
	/**
	 * 初始化系统时，启动所有任务
	 */
	private void initAllRemind(){
		synchronized (runTimeTaskList) {
			RecordSet rs = new RecordSet();
			rs.executeUpdate("update mode_timedtask set triggercycletime=5  where triggerway=1 and triggertype=1 and triggercycletime<5");
			String sql = "select * from mode_timedtask where isenable=1 and appid not in (select id from modeTreeField where isdelete='1') order by id desc";
			rs.executeQuery(sql);
			writeLog("初始化开始启动提醒线程-zengh");
			Scheduler schedule = new QuartzAPIImpl().getScheduler();
			while(rs.next()){
				String id = Util.null2String(rs.getString("id"));
				Map remindJob = remindJobService.getRemindJobById(Util.getIntValue(id));
				startTask(remindJob);
				runTimeTaskList.add(id);
				writeLog("初始化开始启动提醒线程-启动id："+id);
				try {
					if(schedule.getTrigger(id, "WEAVER_FORMMODE_TRIGGER")!=null){
						writeLog(id+"："+schedule.getTriggerState(schedule.getTrigger(id, "WEAVER_FORMMODE_TRIGGER").getKey()));
					}
				} catch (SchedulerException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

					}
				}

	/**
	 * 即时提醒
	 */
	private void doModeRemind(){
		RecordSet rs = new RecordSet();
		//进行即时提醒
		
		if(expandid!=0){//页面扩展按钮
			rs.executeQuery("select * from mode_timedtask_detail where isenable='1' and id in (select taskdetailid from mode_pageexpanddetail where interfacetype='5' and mainid=?)", expandid);
		}else{//新建保存上的按钮
			rs.executeQuery("select * from mode_timedtask_detail where isenable='1' and id in (select taskdetailid from mode_pageexpanddetail where mainid in (select id from mode_pageexpand where modeid=? and issystemflag='1') and interfacetype='5') ", modeid);
		}
		while(rs.next()){
			int id = rs.getInt("id");
			Map remindJob = remindJobService.getTaskDetailById(id);
			doModeRemindNow(remindJob);
		}
	}
	
	public void doRemindImmediately(int taskdetailid){
		RecordSet rs = new RecordSet();
		rs.executeQuery("select * from mode_timedtask_detail where isenable='1' and id=?", taskdetailid);
		if(rs.next()){
			Map remindJob = remindJobService.getTaskDetailById(taskdetailid);
			executeRemind(remindJob,true);
		}
	}
	
	
	/**
	 * 即时提醒
	 */
	private void doModeRemindNow(Map remindJob){
		executeRemind(remindJob,false);
	}
	
	public void executeRemind(Map remindJob,boolean isSendThread){
		String modeid = Util.null2String(remindJob.get("modeid"));
		RecordSet rs = new RecordSet();
		RecordSet rs2 = new RecordSet();
		RecordSet rs3 = new RecordSet();
		RecordSet rs4 = new RecordSet();
		String id = Util.null2String(remindJob.get("id"));
		String receivertype = "";//接收人类型
		String receiverdetail = "";//id
		String receiverlevel = "";//安全级别
		String receiverfieldtype = "";//模块字段类型
        String receiverlevel2="";
		String formtype = Util.null2String(remindJob.get("formtype"));//字段id
		int remindSMS = Util.getIntValue(Util.null2String(remindJob.get("remindSMS")),0);
		int remindEmail = Util.getIntValue(Util.null2String(remindJob.get("remindEmail")),0);
		int remindWorkflow = Util.getIntValue(Util.null2String(remindJob.get("remindWorkflow")),0);
		int remindWeChat = Util.getIntValue(Util.null2String(remindJob.get("remindWeChat")),0);
		int remindEmobile = Util.getIntValue(Util.null2String(remindJob.get("remindEmobile")),0);
		int remindEmobile_msgtype = Util.getIntValue(Util.null2String(remindJob.get("remindEmobile_msgtype")),0);//消息类型标识
		int triggerWorkflowSetId = Util.getIntValue(Util.null2String(remindJob.get("triggerworkflowsetid")),0);
		String workflowType = Util.null2String(remindJob.get("workflowtype"));
		boolean isTriggerWorkflow = (remindWorkflow == 1 && "2".equals(workflowType));

		String remindname = Util.null2String(remindJob.get("name"));
		String meesageDetailType = remindname;
		int remindMsgCenter = Util.getIntValue(Util.null2String(remindJob.get("remindMsgCenter")),0);//消息提醒中心
		int remindMsgCenter_type = Util.getIntValue(Util.null2String(remindJob.get("remindMsgCenter_type")),0);//消息提醒分类
		int remindMsgCenter_Source = Util.getIntValue(Util.null2String(remindJob.get("remindMsgCenter_Source")),0);//消息来源
		String remindMsgCenter_insideUrl = Util.null2String(remindJob.get("remindMsgCenter_insideUrl"));//消息中心内部链接URL
		String remindMsgCenter_outsideUrl = Util.null2String(remindJob.get("remindMsgCenter_outsideUrl"));//消息中心外部链接URL
		String formid = Util.null2String(remindJob.get("formid"));//表单id
		String sql1 = "select * from workflow_billfield where billid="+formid+" and fieldhtmltype in (3,5)";
		RecordSet fieldRS = new RecordSet();
		fieldRS.executeSql(sql1);
		
		List<String> fieldNameList = new ArrayList();
		List<String> detailFieldNameList = new ArrayList();
		String tablename = "";
		String sqlStr = "select b.tablename from modeinfo a,workflow_bill b where a.id="+modeid+" and a.formid=b.id";
		rs.executeSql(sqlStr);
		if(rs.next()){
			tablename = rs.getString("tablename");
		}
        // 判断是否为 虚拟表单;
        boolean isvirtualform = VirtualFormHandler.isVirtualForm(formid);
        String vdatasource = "";
        String vprimarykey="";
        if (isvirtualform) {
            Map<String, Object> vFormInfo = VirtualFormHandler.getVFormInfo(formid);
            vdatasource = Util.null2String(vFormInfo.get("vdatasource"));
            vprimarykey = Util.null2String(vFormInfo.get("vprimarykey"));
            tablename = VirtualFormHandler.getRealFromName(tablename);
            String vformtype = Util.null2String(vFormInfo.get("vformtype"));
            String vsql = Util.null2String(vFormInfo.get("vsql"));
            if("2".equals(vformtype)){
                tablename="("+vsql+")";
            }
        }
        
        String remind_rule_sql="select *  from remind_multi_ruleinfo  where taskdetailid='"+id+"'  order by receivertype,id ";
		rs3.execute(remind_rule_sql);
		while(rs3.next()){
			receivertype = rs3.getString("receivertype");
			receiverdetail = rs3.getString("receiverdetail");
			receiverlevel=rs3.getString("showlevel");
			receiverlevel2 = rs3.getString("showlevel2");
			if(receivertype.equals("1000")){//模块字段
				if(receiverdetail.equals("")){
					return;
				}
				sqlStr = "select id,fieldname,detailtable from workflow_billfield where id in ("+receiverdetail+")";
				rs.executeSql(sqlStr);
				while(rs.next()){
					String temptable = rs.getString("detailtable").toLowerCase();
					if(temptable != null && !temptable.equals("")){
						detailFieldNameList.add(rs.getString("fieldname").toLowerCase());
					}else{
						fieldNameList.add(rs.getString("fieldname").toLowerCase());
					}
				}
			}
		}

		String subject =CubeCipherUitl.decryptByRegEx(Util.null2String(remindJob.get("subject")));//邮件发送主题
		String tempsubject = subject;
		String remindContent = "";//提醒内容
		String remindcontenttype = Util.null2String(remindJob.get("remindcontenttype"));
		if(remindcontenttype.equals("1")){
			String remindcontenttext = Util.null2String(remindJob.get("remindcontenttext"));
			remindContent = remindcontenttext;
		}else if(remindcontenttype.equals("2")){//java方式
			
		}
		String sql = "";
		if(!formtype.equals("0") && !formtype.equals("")){
			sql = "select t1.*,d1.id as subbillid from "+tablename+" t1 left join  "+tablename+"_dt"+formtype+" d1 on t1.id = d1.mainid where t1.id="+billid;
		}else{
			sql = " select * from  "+tablename+" t1 where t1.id="+billid;
			if(isvirtualform){
				if(!billidVirtual.equals(""))
					sql=" select * from  "+tablename+" t1 where t1."+vprimarykey+"='"+billidVirtual+"'";
				else{
					sql=" select * from  "+tablename+" t1 where t1."+vprimarykey+"='"+billid+"'";
				}
			}
		}
		//检验条件
		String sqlwhere = "";
		String conditionstype = Util.null2String(remindJob.get("conditionstype"));
		if(conditionstype.equals("1")){//字段
			String conditionsfield = Util.null2String(remindJob.get("conditionsfield"));
			if(!conditionsfield.equals("")){
				sqlwhere = " and ("+conditionsfield+") ";
			}
		}else if(conditionstype.equals("2")){//sql
			String conditionssql = Util.null2String(remindJob.get("conditionssql"));
			if(!conditionssql.equals("")){
				sqlwhere = " and ("+conditionssql+") ";
			}
		}
		if(!sqlwhere.equals("")){
			sql = sql + sqlwhere;
		}
		
		String[] arr = null;
		int index = 0;
		String sender = "";//发送人   短信发送等需要
		String detailtable = ""; //明细表名
		
        String sendertype = Util.null2String(remindJob.get("sendertype"));
		if(remindSMS==1|| remindMsgCenter==1 ||remindWorkflow==1){//短信提醒--或者流程提醒
			if(sendertype.equals("1")){//提醒管理员
				sender = "1";
			}else if(sendertype.equals("2")){
				sender = "modedatacreater";
			}else if(sendertype.equals("0")){//当前操作者，没有时默认为1
			    if(currentUser != null && !Util.null2String(currentUser.getUID()).equals("")){
			        sender = currentUser.getUID()+"";
                }else{
                    sender = "1";
                }
            }else if(Util.getIntValue(sendertype)>2){
				rs.executeSql("select fieldname,detailtable from workflow_billfield where id="+sendertype);
				if(rs.next()){
					sender = rs.getString("fieldname");
					detailtable = rs.getString("detailtable");
				}
			}
		}
		//微信提醒
		String remindcontentURL = Util.null2String(remindJob.get("remindcontenturl"));
		String remindEmobile_msgurl = Util.null2String(remindJob.get("remindEmobile_msgurl"));
		rs.isReturnDecryptData(true);
		if (isvirtualform) {
            rs.executeSql(sql, vdatasource);
        } else {
            rs.executeSql(sql);
        }
		while(rs.next()){
			boolean isRemindSMS = remindSMS==1?true:false;
			boolean isRemindEmail = remindEmail==1?true:false;
			boolean isRemindWorkflow = (remindWorkflow == 1 && "1".equals(workflowType));
			boolean isRemindWeChat = remindWeChat==1?true:false;
			boolean isRemindEmobile = remindEmobile==1?true:false;
			boolean isRemindMsgCenter = remindMsgCenter==1?true:false;

			List<Integer> userList = new ArrayList<Integer>();
			List<String> emailOrTelList = new ArrayList<String>();
			String billid = rs.getString("id");
			if(isvirtualform)
                billid=rs.getString(vprimarykey);
			String subbillid = rs.getString("subbillid");
			String remindContentStr = remindContent;
			subject = tempsubject;
			String tempsender = sender;
			//----触发审批流程start------
			if(isTriggerWorkflow && triggerWorkflowSetId > 0){
				rs2.executeSql("select isenable from mode_triggerworkflowset where id = " + triggerWorkflowSetId + " and isenable = '1'");
				if(rs2.next()){
					ModeDataApproval modeDataApproval = new ModeDataApproval();
					modeDataApproval.setBillid(Util.getIntValue(billid));
					modeDataApproval.setFormid(Util.getIntValue(formid, 0));
					modeDataApproval.setModeid(Util.getIntValue(modeid,0));
					modeDataApproval.setUser(currentUser);
					modeDataApproval.setTriggerWorkflowSetId(triggerWorkflowSetId);
					modeDataApproval.approvalData();
				}
			}
			//----触发审批流程end------
			if((remindSMS==1||isRemindWorkflow||isRemindMsgCenter)&&!sender.equals("1")&&!sendertype.equals("0")){//短信提醒/流程提醒
				tempsender = Util.null2String(rs.getString(sender));
				if (!"".equals(detailtable)) { //如果明细表名不为空，取明细表的数据
					if(subbillid != null && !subbillid.equals("")){
						String psql = "select * from "+tablename+"_dt"+formtype+" where id="+subbillid;
						rs2.executeSql(psql);
						if(rs2.next()){
							tempsender = Util.null2String(rs2.getString(sender));
						}
					} else {
						tempsender = "";
					}
				}
				if(tempsender.equals("")){//短信发送人如果为空，则跳过
					isRemindSMS = false;
					isRemindWorkflow = false;
					isRemindMsgCenter = false;
				}
			}
			//----------------处理提醒内容-------------------
			if(remindcontenttype.equals("1")){//提醒内容来自文本框
				if(index==0){
					arr = rs.getColumnName();
				}
				index++;
				remindContentStr =CubeCipherUitl.decryptByRegEx(replaceField(rs, arr, remindContentStr,fieldRS,subbillid));
				subject = CubeCipherUitl.decryptByRegEx(replaceField(rs, arr, subject,fieldRS,subbillid));
				if(remindContentStr.equals("") || (subject.equals("") && (remindEmail==1||isRemindWorkflow))){
					isRemindEmail = false;
					isRemindWorkflow = false;
				}
			}else if(remindcontenttype.equals("2")){//提醒内容来自java
					String javaName = Util.null2String(remindJob.get("remindcontentjava"));
                    String remindcontentaddress = Util.null2String(remindJob.get("remindcontentaddress"));
                    if(javaName.equals("")&&remindcontentaddress.equals("")){
                        break;
                    }
                    String classFullName="";
                    if(remindcontentaddress.equals("")&&!javaName.equals("")){
                        Map<String, String> sourceCodePackageNameMap = CommonConstant.SOURCECODE_PACKAGENAME_MAP;
                        String sourceCodePackageName = sourceCodePackageNameMap.get("7");
                        classFullName = sourceCodePackageName+"."+javaName;
                    }else{
                        classFullName=remindcontentaddress;
                    }
					Map<String,Object> param = new HashMap<String,Object>();
					param.put("billid",billid);
					param.put("modeid", rs.getString("formmodeid"));
					param.put("remindJob", remindJob);
					if(index==0){
						arr = rs.getColumnName();
					}
					index++;
					subject = replaceField(rs, arr, subject,fieldRS,subbillid);
					remindContentStr = Util.null2String(CustomJavaCodeRun.run(classFullName, param));
					if(remindContentStr.equals("error")){
						continue;
					}
			}
			
			//微信提醒需要
			String remindcontentURLstr = remindcontentURL;
			if(remindWeChat==1&&!StringHelper.isEmpty(remindcontentURLstr)&&remindcontentURLstr.indexOf("$")!=-1){
				remindcontentURLstr = remindcontentURLstr.replace("$billid$", billid);
				remindcontentURLstr = remindcontentURLstr.replace("$modeId$", rs.getString("formmodeid"));
				remindcontentURLstr = remindcontentURLstr.replace("$formId$", formid);
				remindcontentURLstr = replaceField(rs, arr, remindcontentURLstr,fieldRS,subbillid);
			}
			
			//emobile提醒需要
			String remindcontentURLstr_emobile = remindEmobile_msgurl;
			if(remindEmobile==1&&!StringHelper.isEmpty(remindcontentURLstr_emobile)&&remindcontentURLstr_emobile.indexOf("$")!=-1){
				remindcontentURLstr_emobile = remindcontentURLstr_emobile.replace("$billid$", billid);
				remindcontentURLstr_emobile = remindcontentURLstr_emobile.replace("$modeId$", rs.getString("formmodeid"));
				remindcontentURLstr_emobile = remindcontentURLstr_emobile.replace("$formId$", formid);
				remindcontentURLstr_emobile = replaceField(rs, arr, remindcontentURLstr_emobile,fieldRS,subbillid);
			}

			//消息提醒中心提醒需要
			if(isRemindMsgCenter){
				if(!StringHelper.isEmpty(remindMsgCenter_insideUrl)&&remindMsgCenter_insideUrl.indexOf("$")>-1) {
					remindMsgCenter_insideUrl = remindMsgCenter_insideUrl.replace("$billid$", billid);
					remindMsgCenter_insideUrl = remindMsgCenter_insideUrl.replace("$modeId$", rs.getString("formmodeid"));
					remindMsgCenter_insideUrl = remindMsgCenter_insideUrl.replace("$formId$", formid);
					if(remindMsgCenter_insideUrl.indexOf("$")>-1) {
						remindMsgCenter_insideUrl = replaceField(rs, arr, remindMsgCenter_insideUrl, fieldRS, subbillid);
					}
				}

				if(!StringHelper.isEmpty(remindMsgCenter_outsideUrl)&&remindMsgCenter_outsideUrl.indexOf("$")>-1) {
					remindMsgCenter_outsideUrl = remindMsgCenter_outsideUrl.replace("$billid$", billid);
					remindMsgCenter_outsideUrl = remindMsgCenter_outsideUrl.replace("$modeId$", rs.getString("formmodeid"));
					remindMsgCenter_outsideUrl = remindMsgCenter_outsideUrl.replace("$formId$", formid);
					if(remindMsgCenter_outsideUrl.indexOf("$")>-1) {
						remindMsgCenter_outsideUrl = replaceField(rs, arr, remindMsgCenter_outsideUrl, fieldRS, subbillid);
					}
				}
			}
			ExecutorService executorService = ExpExcelUtil.getInstance().getDoRemindNowPool();
		rs3.execute(remind_rule_sql);
		while(rs3.next()){
			receivertype = rs3.getString("receivertype");
			receiverdetail = rs3.getString("receiverdetail");
			receiverlevel=rs3.getString("showlevel");
			receiverlevel2 = rs3.getString("showlevel2");
			receiverfieldtype=rs3.getString("receiverfieldtype");
			int remindhigherlevel = Util.getIntValue(rs3.getString("higherlevel"),1);// 上级关系 1 当前人员， 2 直接上级， 3 所有上级， 4 本部门 ，5 本分部， 6 本岗位
			int orgrelation = Util.getIntValue(rs3.getString("orgrelation"),1);//1 :所有上级  2：所有下级
			//----------------处理提醒人员-------------------
            if(receivertype.equals("1")){//人力资源
                userList = getRemind_ruleUserList(userList,Util.getIntValue(receivertype), receiverdetail, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
            }else if(receivertype.equals("2")){//分部
                userList = getRemind_ruleUserList(userList,Util.getIntValue(receivertype), receiverdetail, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
            }else if(receivertype.equals("3")){//部门
                userList = getRemind_ruleUserList(userList,Util.getIntValue(receivertype), receiverdetail, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
            }else if(receivertype.equals("4")){//角色
                userList = getRemind_ruleUserList(userList,Util.getIntValue(receivertype), receiverdetail, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
            }else if(receivertype.equals("5")){//所有人
                userList = getRemind_ruleUserList(userList,Util.getIntValue(receivertype), receiverdetail, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
            }else if(receivertype.equals("6")){//模块创建人
				int modedatacreater = rs.getInt("modedatacreater");
				//考虑上级关系 1 当前人员， 2 直接上级， 3 所有上级， 4 本部门 ，5 本分部， 6 本岗位  remindhigherlevel
				if(remindhigherlevel==1){// 1 当前人员
					userList.add(modedatacreater);
				}else if(remindhigherlevel==2){//  2 直接上级
					try {
						ResourceComInfo rc  = new ResourceComInfo();
						int manager = Util.getIntValue(rc.getManagerID(""+modedatacreater),0);
						userList.add(manager);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}else if(remindhigherlevel==3){//  3 所有上级
					try {
						ResourceComInfo rc = new ResourceComInfo();
						String managers = rc.getAllManagerByUserId(""+modedatacreater);
						String[] ms = managers.split(",");
						for (int i = 0; i <ms.length ; i++) {
							userList.add(Integer.parseInt(ms[i]));
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				}else if(remindhigherlevel==4){//  4 本部门
					// 考虑安全级别
					try {
						ResourceComInfo rc = new ResourceComInfo();
						String departmentID = rc.getDepartmentID(""+modedatacreater);
						userList = getRemind_ruleUserList(userList,3, departmentID, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					} catch (Exception e) {
						e.printStackTrace();
					}

				}else if(remindhigherlevel==5){// 5 本分部
					// 考虑安全级别
					try {
						ResourceComInfo rc = new ResourceComInfo();
						String subCompanyID = rc.getSubCompanyID(""+modedatacreater);
						userList = getRemind_ruleUserList(userList,2, subCompanyID, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					} catch (Exception e) {
						e.printStackTrace();
					}

				}else if(remindhigherlevel==6){// 6 本岗位
					try {
						ResourceComInfo rc = new ResourceComInfo();
						String jobTitle = rc.getJobTitle(""+modedatacreater);
						userList = getRemind_ruleUserList(userList,6, jobTitle, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			}else if(receivertype.equals("1000")){//字段
				String objids = "";
				String sqlstr1 = "select id,fieldname,detailtable,viewtype from workflow_billfield where id in ("+ receiverdetail + ")";
				rs4.executeQuery(sqlstr1);
				String tempFieldName = "";
				String viewtype = "0";
				while (rs4.next()) {
					tempFieldName = rs4.getString("fieldname").toLowerCase();
					viewtype = Util.null2String( rs4.getString("viewtype"));
					if("0".equals(viewtype)){
						String val = CubeCipherUitl.decrypt(rs.getString(tempFieldName));
						if(val!=""){
							if(objids.equals("")){
								objids = val;
							}else{
								objids = objids + ","+val;
							}
						}
					}else if("1".equals(viewtype)){
						if(subbillid != null && !subbillid.equals("")){
							String psql = "select * from "+tablename+"_dt"+formtype+" where id="+subbillid;
							rs2.executeQuery(psql);
							if(rs2.next()){
								String val1 = CubeCipherUitl.decrypt(rs2.getString(tempFieldName));
								if(val1!=""){
									if(objids.equals("")){
										objids = val1;
									}else{
										objids = objids + ","+val1;
									}
								}
							}
						}
					}
				}
				if(receiverfieldtype.equals("1")){//人力资源字段
					if(remindhigherlevel==1){ //当前人员
						userList = getRemind_ruleUserList(userList,1, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(remindhigherlevel==2){//  2 直接上级
						userList = getRemind_ruleUserList(userList,7, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(remindhigherlevel==3){//  3 所有上级
						userList = getRemind_ruleUserList(userList,8, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(remindhigherlevel==4){//  4 本部门
						// 考虑安全级别
						// 获取 当前字段的部门id
						objids = getDeptOrCompany(objids,"1");
						userList = getRemind_ruleUserList(userList,3, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(remindhigherlevel==5){// 5 本分部
						// 考虑安全级别
						// 获取 当前字段的分部id
						objids = getDeptOrCompany(objids,"2");
						userList = getRemind_ruleUserList(userList,2, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(remindhigherlevel==6){// 6 本岗位
						// 获取 当前字段的岗位id
						objids = getDeptOrCompany(objids,"3");
						userList = getRemind_ruleUserList(userList,6, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}
				}else if(receiverfieldtype.equals("2")){//部门
					if(orgrelation == 0){
						userList = getRemind_ruleUserList(userList,3, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(orgrelation == 1){//所有上级
						userList = getRemind_ruleUserList(userList,9, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(orgrelation == 2){//所有下级
						userList = getRemind_ruleUserList(userList,10, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}
				}else if(receiverfieldtype.equals("3")){//分部
					if(orgrelation == 0){
						userList = getRemind_ruleUserList(userList,2, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(orgrelation == 1){//所有上级
						userList = getRemind_ruleUserList(userList,11, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}else if(orgrelation == 2){//所有下级
						userList = getRemind_ruleUserList(userList,12, objids, Util.getIntValue(receiverlevel),Util.getIntValue(receiverlevel2, -1));
					}
				}else if(receiverfieldtype.equals(receiverdetail)){ // 单行文本字段
					emailOrTelList.addAll(Arrays.asList(objids.split(",")));
				}
				if(userList.size()==0){
					continue;
				}
			}else{
				if(userList.size()==0){
					continue;
				}
			}
		}
		
		Set<Integer> set_ = new HashSet<Integer>(userList);
		userList = new ArrayList<Integer>(set_);

		emailOrTelList = new ArrayList<String>(new HashSet<String>(emailOrTelList)); // 去除重复
		
		rs.writeLog("userList.size="+userList.size());
			//----------------发送提醒-------------------
			Map<String, Object> para = new HashMap<String, Object>();
			para.put("billid", billid);
			para.put("modeid", modeid);
			para.put("sender", tempsender);
			para.put("subject", subject);
			para.put("remindurl", remindcontentURLstr);
			para.put("remindurl_emobile", remindcontentURLstr_emobile);
			para.put("remindjobid", id);
			para.put("remindEmobile_msgtype", remindEmobile_msgtype);
			para.put("remindMsgCenter_type", remindMsgCenter_type);
			para.put("remindMsgCenter_insideUrl", remindMsgCenter_insideUrl);
			para.put("remindMsgCenter_outsideUrl", remindMsgCenter_outsideUrl);
			para.put("meesageDetailType", meesageDetailType);
			para.put("remindMsgCenter_Source",remindMsgCenter_Source);
			para.put("isKtreeReply",isKtreeReply);
			//排除掉4解聘、5离职、6退休、7无效的人员
			RecordSet rsLz = new RecordSet();
			for (int i = 0; i < userList.size(); i++) {
				rsLz.executeQuery("select status from hrmresource b where id = ? and b.status not in (0,1,2,3)", userList.get(i));
				if (rsLz.next() && rsLz.getCounts() > 0) {
					userList.remove(i);
				}
			}
			if(isSendThread){//通过多线程发送
				executorService.submit(new DoModeRemindNowThread(para,isRemindSMS,isRemindEmail,remindContentStr,
						isRemindWorkflow,isRemindWeChat,isRemindEmobile,isRemindMsgCenter,tempsender,userList,emailOrTelList));
			}else{
				new DoModeRemindNowThread(para,isRemindSMS,isRemindEmail,remindContentStr,
						isRemindWorkflow,isRemindWeChat,isRemindEmobile,isRemindMsgCenter,tempsender,userList,emailOrTelList).sendMessage();
			}

		}
	}


	private String replaceField(RecordSet rs, String[] arr,
								String remindContentStr,RecordSet fieldRS,String subbillid) {
		//提醒内容转换
		RecordSet recordSet = new RecordSet();
		RecordSet recordSet2 = new RecordSet();
		String tempsubstring = "";
		int beginIndex = remindContentStr.indexOf("$");
		if(beginIndex!=-1){
			while(beginIndex>-1){
				int endIndex = remindContentStr.indexOf("$",beginIndex+1);
				if(endIndex>-1){
					String substring = remindContentStr.substring(beginIndex+1, endIndex);
					tempsubstring = substring;
					boolean flag = false;
					String val = "";
					if(substring != null && !substring.equals("")){
						String[] substrings = substring.split("\\.");
						if(substrings.length > 1){
							if(subbillid != null && !subbillid.equals("")){
								String sql = "select * from "+substrings[0]+" where id="+subbillid;
								recordSet2.executeSql(sql);
								if(recordSet2.next()){
									val = recordSet2.getString(substrings[0],substrings[1]);
									flag = true;
								}
							}else{
								// 如果明细表数据为空， 那么值为 "";
								//return "";
								val = "";
								flag = true;
							}
						}else{
							for(int i=0;arr!=null&&i<arr.length;i++){
								if(substring.equalsIgnoreCase(arr[i])){
									flag = true;
									val = rs.getString(arr[i]);
									break;
								}
							}
						}
					}
					String tempsubtable = "";
					if(!tempsubstring.equals("")){
						String[] tempsubstrings = tempsubstring.split("\\.");
						if(tempsubstrings.length > 1){
							tempsubstring = tempsubstrings[1];
							tempsubtable = tempsubstrings[0];
						}
					}
					fieldRS.beforFirst();
					while(fieldRS.next()){
						String fieldname = fieldRS.getString("fieldname");
						String detailtable = fieldRS.getString("detailtable");
						if((fieldname.equalsIgnoreCase(substring) && detailtable.equals("")) || (fieldname.equalsIgnoreCase(tempsubstring) && detailtable.equals(tempsubtable))){
							String fieldhtmltype = fieldRS.getString("fieldhtmltype");
							if(fieldhtmltype.equals("3")){//浏览框
								FieldInfo fieldInfo = new FieldInfo();
								int type = fieldRS.getInt("type");
								String fielddbtype =  fieldRS.getString("fielddbtype");
								val = fieldInfo.getFieldName(val, type, fielddbtype);
							}else if(fieldhtmltype.equals("5")){//选择项
								String id = fieldRS.getString("id");
								//添加判断val 是不是复选框即 val是否包含逗号也就是复选框
								String sql = "";
								int checkBoxFlag = 0;//用于标记是否是多选框
								if(null != val && val.contains(",")){
									checkBoxFlag = 1;
									sql = "select selectname from workflow_selectitem where fieldid="+id+" and selectvalue in ("+val+")";
								}else{

									sql = "select selectname from workflow_selectitem where fieldid="+id+" and selectvalue="+Util.getIntValue(val);
								}
								recordSet.executeSql(sql);
								String valSpan = "";
								while(recordSet.next()){
									if(checkBoxFlag == 1){
										valSpan += recordSet.getString("selectname")+" ";
									}else{
										val = recordSet.getString("selectname");
									}
								}
								if(checkBoxFlag == 1){
									val = valSpan;
								}
							}
						}
					}
					val = EncryptConfigBiz.getDecryptData(val);
					if(flag){
						remindContentStr = remindContentStr.replace("$"+substring+"$", val);
					}else {
						remindContentStr = remindContentStr.replaceFirst("\\$", "#+#");
					}
					beginIndex = remindContentStr.indexOf("$");
				}else{
					break;
				}
			}
		}
		remindContentStr.replace("#+#", "\\$");
		return remindContentStr;
	}
	
	
	
	
	
	
	/**
	 * 插入提醒数据
	 */
	private void doSaveRemind(){
		//转换为sqlwhere后，不需要再初始化数据到mode_reminddata表中
	}
	
	/**
	 * 根据分部、部门、分部等查找对应的人员
	 * @param type 类型
	 * @param objids 
	 * @param seclevel  安全级别
	 * @return
	 */
	public List<Integer> getUserList(int type,String objids,int seclevel){
		List<Integer> list = new ArrayList<Integer>();
		RecordSet rs = new RecordSet();
		String sql = "";
		if(type==1){//人力资源
			if(!objids.equals("")){
				String[] arr = objids.split(",");
				for(int i=0;i<arr.length;i++){
					list.add(Util.getIntValue(arr[i]));
				}
			}
		}else if(type==2){//分部   安全级别
			sql = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where a.id in("+objids+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel;
		}else if(type==3){//部门   安全级别
			sql = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.departmentid=a.id and a.id in ("+objids+") and  b.seclevel>="+seclevel;
		}else if(type==4){//角色   安全级别
			sql = " select distinct(resourceid) as id from hrmrolemembers a,hrmresource b where a.roleid in("+objids+") and a.resourceid=b.id and b.seclevel>="+seclevel+
			" union select distinct(resourceid) as id from hrmrolemembers a,hrmresourcemanager b where a.roleid in("+objids+") and a.resourceid=b.id and b.seclevel>="+seclevel;
		}else if(type==5){//所有人  安全级别
			sql = "select distinct(id) as id from hrmresource where seclevel>="+seclevel;
		}
		if(!sql.equals("")){
			rs.executeSql(sql);
			while(rs.next()){
				list.add(rs.getInt("id"));
			}
		}
		return list;
	}
	
	
	/**
	 * 根据分部、部门、分部等查找对应的人员
	 * @param type 类型
	 * @param objids 
	 * @param seclevel  安全级别
	 * @return
	 */
	public List<Integer> getRemind_ruleUserList(final List<Integer> userList,int type,String objids,int seclevel,int seclevel2){
//		List<Integer> list = new ArrayList<Integer>();
		RecordSet rs = new RecordSet();
		String sql = "";
		String seclevel2Sql="";
		if(seclevel2!=-1){
			seclevel2Sql = "  and b.seclevel<= "+seclevel2;
		}
		if(type==1){//人力资源
			if(!objids.equals("")){
				String[] arr = objids.split(",");
				RecordSet rsObj = new RecordSet();
				int objid = -1;
				for(int i=0;i<arr.length;i++){
					objid = Util.getIntValue(arr[i]);
					//排除掉4解聘、5离职、6退休、7无效的人员
					rsObj.executeQuery("select status from hrmresource where id = ? and status in (0,1,2,3)", objid);
					if (rsObj.getCounts()!=0)
						userList.add(objid);
				}
			}
		}else if(type==2){//分部   安全级别
			sql = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where b.status in (0,1,2,3) and a.id in("+objids+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel+seclevel2Sql;
		}else if(type==3){//部门   安全级别
			sql = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.status in (0,1,2,3) and b.departmentid=a.id and a.id in ("+objids+") and  b.seclevel>="+seclevel+seclevel2Sql;
		}else if(type==4){//角色   安全级别
			sql = " select distinct(resourceid) as id from hrmrolemembers a,hrmresource b where b.status in (0,1,2,3) and a.roleid in("+objids+") and a.resourceid=b.id and b.seclevel>="+seclevel+seclevel2Sql+
			" union select distinct(resourceid) as id from hrmrolemembers a,hrmresourcemanager b where a.roleid in("+objids+") and a.resourceid=b.id and b.seclevel>="+seclevel+seclevel2Sql;
		}else if(type==5){//所有人  安全级别
			sql = "select distinct(id) as id from hrmresource b where b.status in (0,1,2,3) and b.seclevel>="+seclevel+seclevel2Sql;
			//所有人的时候需要取满足安全级别的管理员账号
			String sql1 = "select distinct(id) as id from HrmResourceManager b where b.seclevel>="+seclevel+seclevel2Sql;
			rs.executeQuery(sql1);
			while(rs.next()){
				userList.add(rs.getInt("id"));
			}
		}else if(type==6){//模块创建人、模块字段 本岗位选项 都可以用
			sql = "select distinct(id) as id from hrmresource b where b.status in (0,1,2,3) and b.jobtitle  in ("+objids+")";
		}else if(type==7){//模块字段  人员直接上级
			if(!"".equals(objids)){
				String[] hrmIds =objids.split(",");
				if(hrmIds != null  && hrmIds.length>0 ){
					ResourceComInfo rc = null;
					try {
						rc = new ResourceComInfo();
						for (String id : hrmIds) {
							int manager = Util.getIntValue(rc.getManagerID(id),0);
							userList.add(manager);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
			}
		}else if(type==8){//模块字段  人员所有上级
			if(!"".equals(objids)){
				String[] hrmIds =objids.split(",");
				if(hrmIds != null  && hrmIds.length>0 ){
					ResourceComInfo rc = null;
					try {
						rc = new ResourceComInfo();
						for (String id : hrmIds) {
							String managers = rc.getAllManagerByUserId(""+id);
							String[] ms = managers.split(",");
							if(null != ms){
								for (int i = 0; i <ms.length ; i++) {
									userList.add(Integer.parseInt(ms[i]));
								}
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
			}
		}else if(type==9){  //部门 所有上级
			try {
				String deptids = "";
				if(objids.contains(",")){
					String[] objidArr = objids.split(",");
					for (int i = 0; i <objidArr.length ; i++) {
						String deptidTemp="";
						deptidTemp = DepartmentComInfo.getAllParentDepartId(objidArr[i], deptidTemp);
						if(deptidTemp.indexOf(",")==0){
							deptidTemp =deptidTemp.substring(1,deptidTemp.length());
						}
						if(!"".equals(deptidTemp)){
							deptids+=deptidTemp+",";
						}


					}
					deptids = deptids.substring(0,deptids.length()-1);
				}else{
					deptids= DepartmentComInfo.getAllParentDepartId(objids, deptids);
					if(deptids.indexOf(",")==0){
						deptids =deptids.substring(1,deptids.length());
					}
				}

				if(!"".equals(deptids)){
					String[]  deptArr = deptids.split(",");
					if(null != deptArr){
						if(deptArr.length<1000){
							sql = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.status in (0,1,2,3) and b.departmentid=a.id and a.id in ("+deptids+") and  b.seclevel>="+seclevel+seclevel2Sql;
						}else{
							List<String> deptList = new ArrayList<String>(Arrays.asList(deptArr)) ;
							int len = 1000;
							int size = deptList.size();
							int count = (size + len - 1) / len;
							for (int i = 0; i < count; i++) {
								List<String> subList = deptList.subList(i * len, ((i + 1) * len > size ? size : len * (i + 1)));
								String getAllemps = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.status in (0,1,2,3) and b.departmentid=a.id and a.id in ("+subList.stream().map(String::valueOf).collect(Collectors.joining(","))+") and  b.seclevel>="+seclevel+seclevel2Sql;
								boolean flag =  rs.execute(getAllemps);
								if(flag){
									while(rs.next()){
										userList.add(rs.getInt("id"));
									}

								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else if(type==10){  //部门 所有下级
			try {
				String deptids = "";
				if(objids.contains(",")){
				    String[] objidArr = objids.split(",");
                        for (int i = 0; i <objidArr.length ; i++) {
							String deptidTemp="";
							deptidTemp = DepartmentComInfo.getAllChildDepartId(objidArr[i], deptidTemp);
                            if(deptidTemp.indexOf(",")==0){
                                deptidTemp =deptidTemp.substring(1,deptidTemp.length());
                            }
							if(!"".equals(deptidTemp)) {
								deptids += deptidTemp + ",";
							}

                        }
                    deptids = deptids.substring(0,deptids.length()-1);
                }else{
                    deptids= DepartmentComInfo.getAllChildDepartId(objids, deptids);
                    if(deptids.indexOf(",")==0){
                        deptids =deptids.substring(1,deptids.length());
                    }
                }

				if(!"".equals(deptids)){
					String[] deptArr = deptids.split(",");
					if(deptArr.length<1000){
						sql = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.status in (0,1,2,3) and b.departmentid=a.id and a.id in ("+deptids+") and  b.seclevel>="+seclevel+seclevel2Sql;
					}else{
						List<String> deptList = new ArrayList<String>(Arrays.asList(deptArr)) ;
						int len = 1000;
						int size = deptList.size();
						int count = (size + len - 1) / len;
						for (int i = 0; i < count; i++) {
							List<String> subList = deptList.subList(i * len, ((i + 1) * len > size ? size : len * (i + 1)));
							String getAllemps = " select distinct(b.id) as id from hrmdepartment a,hrmresource b where b.status in (0,1,2,3) and b.departmentid=a.id and a.id in ("+subList.stream().map(String::valueOf).collect(Collectors.joining(","))+") and  b.seclevel>="+seclevel+seclevel2Sql;
							boolean flag =  rs.execute(getAllemps);
							if(flag){
								while(rs.next()){
									userList.add(rs.getInt("id"));
								}

							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else if(type==11){  //分部 所有上级
			try {
				String companys = "";
				if(objids.contains(",")){
					String[] companyArr = objids.split(",");
					for (int i = 0; i <companyArr.length ; i++) {
						String companyTemp ="";
						companyTemp = SubCompanyComInfo.getAllParentSubcompanyId(companyArr[i], companyTemp);
						if(companyTemp.indexOf(",")==0){
							companyTemp =companyTemp.substring(1,companyTemp.length());
						}
						if(!"".equals(companyTemp)) {
							companys += companyTemp + ",";
						}
					}
					companys = companys.substring(0,companys.length()-1);
				}else{
					companys = SubCompanyComInfo.getAllParentSubcompanyId(objids, companys);
					if(companys.indexOf(",")==0){
						companys =companys.substring(1,companys.length());

					}

				}


				if(!"".equals(companys)){
					String[] companyArr = companys.split(",");
					if(companyArr.length<1000){
						sql = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where b.status in (0,1,2,3) and a.id in("+companys+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel+seclevel2Sql;
					}else{
						List<String> companyList = new ArrayList<String>(Arrays.asList(companyArr)) ;
						int len = 1000;
						int size = companyList.size();
						int count = (size + len - 1) / len;
						for (int i = 0; i < count; i++) {
							List<String> subList = companyList.subList(i * len, ((i + 1) * len > size ? size : len * (i + 1)));
							String getAllemps  = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where b.status in (0,1,2,3) and a.id in("+subList.stream().map(String::valueOf).collect(Collectors.joining(","))+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel+seclevel2Sql;
							boolean flag =  rs.execute(getAllemps);
							if(flag){
								while(rs.next()){
									userList.add(rs.getInt("id"));
								}

							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else if(type==12){  //分部 所有下级
			try {
//				String companys = "";
//				companys = SubCompanyComInfo.getAllChildSubcompanyId(objids, companys);
//				if(companys.indexOf(",")==0){
//					companys =companys.substring(1,companys.length());
//				}
				String companys = "";
				if(objids.contains(",")){
					String[] companyArr = objids.split(",");
					for (int i = 0; i <companyArr.length ; i++) {
						String companyTemp ="";
						companyTemp = SubCompanyComInfo.getAllChildSubcompanyId(companyArr[i], companyTemp);
						if(companyTemp.indexOf(",")==0){
							companyTemp =companyTemp.substring(1,companyTemp.length());
						}
						if(!"".equals(companyTemp)) {
							companys += companyTemp + ",";
						}

					}
					companys = companys.substring(0,companys.length()-1);
				}else{
					companys = SubCompanyComInfo.getAllChildSubcompanyId(objids, companys);
					if(companys.indexOf(",")==0){
						companys =companys.substring(1,companys.length());

					}

				}
				if(!"".equals(companys)){
					String[] companyArr = companys.split(",");
					if(companyArr.length<1000){
						sql = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where b.status in (0,1,2,3) and a.id in("+companys+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel+seclevel2Sql;
					}else{
						List<String> companyList = new ArrayList<String>(Arrays.asList(companyArr)) ;
						int len = 1000;
						int size = companyList.size();
						int count = (size + len - 1) / len;
						for (int i = 0; i < count; i++) {
							List<String> subList = companyList.subList(i * len, ((i + 1) * len > size ? size : len * (i + 1)));
							String getAllemps  = "select distinct(b.id) as id from hrmsubcompany a,hrmresource b where b.status in (0,1,2,3) and a.id in("+subList.stream().map(String::valueOf).collect(Collectors.joining(","))+") and b.subcompanyid1=a.id and  b.seclevel>="+seclevel+seclevel2Sql;
							boolean flag =  rs.execute(getAllemps);
							if(flag){
								while(rs.next()){
									userList.add(rs.getInt("id"));
								}

							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if(!sql.equals("")){
			rs.executeSql(sql);
			while(rs.next()){
				userList.add(rs.getInt("id"));
			}
		}

		//排除掉4解聘、5离职、6退休、7无效的人员
		for (int i = 0; i < userList.size(); i++) {
			rs.executeQuery("select status from hrmresource b where id = ? and b.status not in (0,1,2,3)", userList.get(i));
			if (rs.next() && rs.getCounts() > 0) {
				userList.remove(i);
			}
		}
		return userList;
	}
	
	
	/**
	 * 根据到期提醒的设置，生成到期提醒的where条件
	 * @param remindids
	 * @return
	 */
	public void castDqtx2Sqlwhere(String remindids){
		RecordSet rs = new RecordSet();
		RecordSet rs1 = new RecordSet();
		String currentdate = "";
		String dbtype = rs.getDBType();
		String orgindbtype = rs.getOrgindbtype();
		if("sqlserver".equals(dbtype)){
			currentdate = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
		}else if("mysql".equals(dbtype)){
			currentdate = " CURDATE() ";//格式为2017-01-01的字符串
		}else if("oracle".equals(dbtype)){
			currentdate = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
		}
		
		String sqlwhere = "";
		String isnullFun = CommonConstant.DB_ISNULL_FUN;
		if(remindids.equals("")){
			sqlwhere = " and "+isnullFun+"(sqlwherejson,'')<>''";
		}else{
			sqlwhere = " and id in ("+remindids+")";
		}
		String sql = "select * from mode_timedtask_detail where tasktype='remind' "+sqlwhere+" and remindtype=2";
		rs.execute(sql);
		
		
		//String errorMsg = "";
		if(!"sqlserver".equals(dbtype)&&!"oracle".equals(dbtype)&&!"mysql".equals(dbtype)){
			//errorMsg = "到期提醒转换为sqlwhere失败，不支持的数据库类型:"+dbtype;
			writeLog("到期提醒转换为sqlwhere失败，不支持的数据库类型:"+dbtype);
			return;
		}
		
		Map<String,Map<String,Map<String,String>>> map = new HashMap<String,Map<String,Map<String,String>>>();
		while(rs.next()){
			int id = rs.getInt("id");
			int remindtimetype = rs.getInt("remindtimetype");//到期时间类型 1：常量   2：字段
			int remindtimetype2 = rs.getInt("remindtimetype2");//到期时间类型为   2：字段的时候的时间字段类型：0：时间字段，1：时间常量
			int remindtimetype3 = rs.getInt("remindtimetype3");//到期日期时间为   1：组合 、0：单独
			String reminddate = rs.getString("reminddate");//到期日期常量
			String remindtime = rs.getString("remindtime");//到期时间常量
			String remindtimevalue = rs.getString("remindtimevalue");//到期时间常量2,当到期日期为字段的时候
			int reminddatefield = rs.getInt("reminddatefield");//到期日期字段
			int reminddatetimefield = rs.getInt("reminddatetimefield");//到期日期时间字段
			int remindtimefield = rs.getInt("remindtimefield");//到期时间字段
			
			int incrementway = rs.getInt("incrementway");//时间增量  1：提前 2：延迟
			int incrementtype = rs.getInt("incrementtype");//时间增量类型  1：整数常量    2：整数字段 
			
			int incrementfield = rs.getInt("incrementfield");//时间增量整数字段
			int incrementnum	 = rs.getInt("incrementnum");//时间增量增长量
			int incrementunit	 = rs.getInt("incrementunit");//时间增量单位  1：分钟   2：小时   3：天
			int formtype	 = rs.getInt("formtype");//0或者为空的时候表示主表，>=1表示对应的子表的后缀
			
			String formid = rs.getString("formid");//表单
			
			// 判断是否为 虚拟表单;
            String vdatasource = ""; // 虚拟表单数据源
            String vdatasourceDBtype = ""; // 数据库类型
            String vtablename = "";
            boolean isvirtualform = VirtualFormHandler.isVirtualForm(formid);
            Map<String, Object> vFormInfo = new HashMap<String, Object>();
            if (isvirtualform) {
                vFormInfo = VirtualFormHandler.getVFormInfo(formid);
                vtablename = Util.null2String(vFormInfo.get("tablename"));
                vdatasource = Util.null2String(vFormInfo.get("vdatasource")); // 虚拟表单数据源
                DataSourceXML dataSourceXML = new DataSourceXML();
                vdatasourceDBtype = dataSourceXML.getDataSourceDBType(vdatasource);
            } else {
                vdatasourceDBtype = rs.getDBType();
            }
            if ("mysql".equals(vdatasourceDBtype)) {
                isnullFun = "IFNULL";
                currentdate = " DATE_FORMAT(NOW(),'%Y-%m-%d') ";// 格式为2017-01-01的字符串
            }else if(vdatasourceDBtype.indexOf("sqlserver")!=-1){
                isnullFun = "isnull";
                currentdate = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
            }else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
                isnullFun = "nvl";
                currentdate = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
            }
			
			
			Map<String,Map<String,String>> fieldMap = new HashMap<String,Map<String,String>>();
			if(map.containsKey(formid)){
				fieldMap = map.get(formid);
			}else{
				String sql1 = "select id,fieldname,(select tablename from workflow_bill where id="+formid+") as maintable,detailtable,viewtype from workflow_billfield where billid="+formid;
				rs1.execute(sql1);
				while(rs1.next()){
					Map<String,String> tempMap = new HashMap<String,String>();
					String fid = Util.null2String(rs1.getString("id"));
					String fieldname = Util.null2String(rs1.getString("fieldname")).toLowerCase();
					String maintable = Util.null2String(rs1.getString("maintable"));
					String detailtable = Util.null2String(rs1.getString("detailtable"));
					String viewtype = Util.null2String(rs1.getString("viewtype"));
					tempMap.put("fieldname", fieldname);
					if (isvirtualform) {
	                     maintable = vtablename;
	                }
					String tablename = maintable;
					if("1".equals(viewtype)){
						tablename = detailtable; 
					}
					tempMap.put("tablename", tablename);
					tempMap.put("maintable", maintable);
					tempMap.put("detailtable", detailtable);
					tempMap.put("viewtype", viewtype);
					fieldMap.put(fid, tempMap);
				}
				map.put(formid,fieldMap);
			}
			//一律转换为秒数
			long seconds = 0;
			boolean needAdd = true;
			String baseSecondsStr = "";
			if(incrementunit==1){//1：分钟     
				baseSecondsStr = "60";
			}else if(incrementunit==2){// 2：小时
				baseSecondsStr = "60*60";
			}else if(incrementunit==3){//3：天
				baseSecondsStr = "60*60*24";
			}else{
				needAdd = false;
			}
			if(needAdd){
				if(incrementtype==1){ // 1：整数常量 
					if(incrementnum>0){
						baseSecondsStr= baseSecondsStr+"*"+incrementnum;
					}else{
						needAdd = false;
					}
				}else if(incrementtype==2){//2：整数字段 
					
					String incrementfieldname = "";
					if(fieldMap.containsKey(incrementfield+"")){
						Map<String,String> tempMap = fieldMap.get(incrementfield+"");
						incrementfieldname = tempMap.get("fieldname");
						String tablename = tempMap.get("tablename");
						incrementfieldname = "t1."+incrementfieldname;
						baseSecondsStr= baseSecondsStr+"*"+isnullFun+"("+incrementfieldname+",0)";
					}else{
						//errorMsg = "到期提醒转换为sqlwhere数据失败，整数字段incrementfield:"+incrementfield+"不是一个有效的字段,在workflow_billfield中不存在";
						writeLog("到期提醒转换为sqlwhere数据失败，整数字段incrementfield:"+incrementfield+"不是一个有效的字段,在workflow_billfield中不存在");
						continue;
					}
				}else{
					needAdd = false;
				}
			}
			
			if(needAdd){
				if(incrementway==1){ //1：提前
					baseSecondsStr = "-1*"+baseSecondsStr;
				}else if(incrementway==2){// 2：延迟
					baseSecondsStr = "1*"+baseSecondsStr;
				}else{
					needAdd = false;
				}
			}

			String sqlwhereTemp = "";
			if(remindtimetype==1){//常量
				if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
					if(!needAdd){
						baseSecondsStr = "0";
					}
					sqlwhereTemp = " and( DATEDIFF(ss,'"+reminddate+"'+' '+'"+remindtime+"',getDate())>=("+baseSecondsStr+") and DATEDIFF(ss,'"+reminddate+"'+' '+'"+remindtime+"',convert(varchar(10),getdate(),120)+' 00:00:00')<="+baseSecondsStr+"  ) ";
				 }else if ("mysql".equals(vdatasourceDBtype)) {
					if(!needAdd){
						baseSecondsStr = "0";
					}
					List<String> list = new ArrayList<String>();
					list.add("'"+reminddate+"'");
					list.add("' '");
					list.add("'"+remindtime+"'");
					String sqlConcat = CommonConstant.getConcatSql(list, rs.getDBType());
					
					List<String> list1 = new ArrayList<String>();
					list1.add("CURDATE()");
					list1.add("' 00:00:00'");
					String sqlConcat1 = CommonConstant.getConcatSql(list1, rs.getDBType());
					
					sqlwhereTemp = " and( TIMESTAMPDIFF(SECOND,"+sqlConcat+",now())>=("+baseSecondsStr+") and TIMESTAMPDIFF(SECOND,"+sqlConcat+","+sqlConcat1+")<="+baseSecondsStr+" ) ";
				}else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
					//select (To_date('2008-05-01 00:00:00' , 'yyyy-mm-dd hh24-mi-ss') - To_date('2008-04-30 23:59:59' , 'yyyy-mm-dd hh24-mi-ss'))  * 24 * 60 * 60 FROM DUAL
					if(!needAdd){
						baseSecondsStr = "0";
					}
					if("gs".equals(orgindbtype)){//高斯数据需要单独处理
						List<String> list = new ArrayList<String>();
						list.add("'"+reminddate+"'");
						list.add("' '");
						list.add("'"+remindtime+"'");
						String sqlConcat = CommonConstant.getConcatSql(list,orgindbtype);
						List<String> list1 = new ArrayList<String>();
						list1.add(""+currentdate+"");
						list1.add("' '");
						list1.add("'00:00:00'");
						String sqlConcat1 = CommonConstant.getConcatSql(list1,orgindbtype);
						sqlwhereTemp = " and ((sysdate - To_date("+sqlConcat+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+sqlConcat1+", 'yyyy-mm-dd hh24:mi:ss')-To_date("+sqlConcat+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 <"+baseSecondsStr+"   ) ";
					}else{

						sqlwhereTemp = " and ((sysdate - To_date('"+reminddate+"'||' '||'"+remindtime+"' , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+currentdate+"||' 00:00:00' , 'yyyy-mm-dd hh24-mi-ss')-To_date('"+reminddate+"'||' '||'"+remindtime+"' , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 <"+baseSecondsStr+"   ) ";
					}
				}
			}else if(remindtimetype==2){//字段
				if(remindtimetype3 == 0){
					String datefield_name = "";
					String timefield_name = "";
					String viewtype = "";
					if(reminddatefield == -104){//创建日期
						datefield_name = "modedatacreatedate";
						viewtype = "0";
					}else{
						Map<String,String> dateMap = fieldMap.get(reminddatefield+"");
						datefield_name = dateMap.get("fieldname");
						viewtype = dateMap.get("viewtype");
					}
					String tablename = "t1";
					if("1".equals(viewtype)){
						tablename = "d1"; 
					}
					String dateStr = tablename+"."+datefield_name;
					String timeStr = "";
					if(remindtimetype2==0){//0：时间字段
						Map<String,String> timeMap = fieldMap.get(remindtimefield+"");
						timefield_name = timeMap.get("fieldname");
						viewtype = timeMap.get("viewtype");
						tablename = "t1";
						if("1".equals(viewtype)){
							tablename = "d1"; 
						}
						timeStr = tablename+"."+timefield_name;
					}else if(remindtimetype2==1){//1：时间常量
						timeStr = "'"+remindtimevalue+"'";
					}
					
					 if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
						if(!needAdd){
							baseSecondsStr = "0";
						}
						String timewhere = "";
						if(remindtimetype2==0){//0：时间字段
							timewhere = "  and "+isnullFun+"("+timeStr+",'')<>'' and "+ timeStr + " <>''";
						}
						//当前日时间> 到期时间 > 今天凌晨0点的时间
						sqlwhereTemp = " and( DATEDIFF(ss,"+dateStr+"+' '+"+timeStr+",getDate())>=("+baseSecondsStr+") and DATEDIFF(ss,"+dateStr+"+' '+"+timeStr+",convert(varchar(10),getdate(),120)+' 00:00:00')<="+baseSecondsStr+" and "+isnullFun+"("+dateStr+",'')<>''  and " + dateStr + "<> ''" +timewhere+" ) ";
					 }else if ("mysql".equals(vdatasourceDBtype)) {
						if(!needAdd){
							baseSecondsStr = "0";
						}
						String timewhere = "";
						if(remindtimetype2==0){//0：时间字段
							timewhere = "  and "+isnullFun+"("+timeStr+",'')<>'' ";
						}
						//当前日时间> 到期时间 > 今天凌晨0点的时间
						List<String> list = new ArrayList<String>();
						list.add(dateStr);
						list.add("' '");
						list.add(timeStr);
						String sqlConcat = CommonConstant.getConcatSql(list, rs.getDBType());
						
						List<String> list1 = new ArrayList<String>();
						list1.add("CURDATE()");
						list1.add("' 00:00:00'");
						String sqlConcat1 = CommonConstant.getConcatSql(list1, rs.getDBType());
						
						sqlwhereTemp = " and( TIMESTAMPDIFF(SECOND,"+sqlConcat+",now())>=("+baseSecondsStr+") and TIMESTAMPDIFF(SECOND,"+sqlConcat+","+sqlConcat1+")<="+baseSecondsStr+" and "+isnullFun+"("+dateStr+",'')<>'' "+timewhere+" ) ";
					 }else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
						if(!needAdd){
							baseSecondsStr = "0";
						}
						String timewhere = "";
						if(remindtimetype2==0){//0：时间字段
							timewhere = "  and "+timeStr+" is not null ";
						}
	
						if("gs".equals(orgindbtype)){
							List<String> list = new ArrayList<String>();
							list.add(""+dateStr+"");
							list.add("' '");
							list.add(""+timeStr+"");
							String sqlConcat = CommonConstant.getConcatSql(list,orgindbtype);
							List<String> list1 = new ArrayList<String>();
							list1.add(""+currentdate+"");
							list1.add("' '");
							list1.add("'00:00:00'");
							String sqlConcat1 = CommonConstant.getConcatSql(list1, orgindbtype);
							List<String> list2 = new ArrayList<String>();
							list2.add(""+dateStr+"");
							list2.add("' '");
							list2.add(""+timeStr+"");
							String sqlConcat2 = CommonConstant.getConcatSql(list2, orgindbtype);
							sqlwhereTemp = " and ((sysdate - To_date("+sqlConcat+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+sqlConcat1+", 'yyyy-mm-dd hh24:mi:ss')-To_date("+sqlConcat2+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 <"+baseSecondsStr+" and "+dateStr+" is not null "+timewhere+" ) ";
						}else{
							//当前时间 > 到期时间 > 今天凌晨0点的时间
							sqlwhereTemp = " and ((sysdate - To_date("+dateStr+"||' '||"+timeStr+" , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+currentdate+"||' 00:00:00' , 'yyyy-mm-dd hh24-mi-ss')-To_date("+dateStr+"||' '||"+timeStr+" , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 <"+baseSecondsStr+" and "+dateStr+" is not null "+timewhere+" ) ";
						}
					}
				}else{
					String datetimefield_name = "";
					Map<String,String> dateMap = fieldMap.get(reminddatetimefield+"");
					datetimefield_name = dateMap.get("fieldname");
					String viewtype = dateMap.get("viewtype");
					String tablename = "t1";
					if("1".equals(viewtype)){
						tablename = "d1"; 
					}
					String datetimeStr = tablename+"."+datetimefield_name;
					if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
						if(!needAdd){
							baseSecondsStr = "0";
						}
						//当前日时间> 到期时间 > 今天凌晨0点的时间
						sqlwhereTemp = " and( DATEDIFF(ss,"+datetimeStr+",getDate())>=("+baseSecondsStr+") and DATEDIFF(ss,"+datetimeStr+",convert(varchar(10),getdate(),120)+' 00:00:00')<="+baseSecondsStr+" and "+isnullFun+"("+datetimeStr+",'')<>''  and " + datetimeStr + "<> '' ) ";
					 }else if ("mysql".equals(vdatasourceDBtype)) {
						if(!needAdd){
							baseSecondsStr = "0";
						}
						//当前日时间> 到期时间 > 今天凌晨0点的时间
						List<String> list = new ArrayList<String>();
						list.add(datetimeStr);
						String sqlConcat = CommonConstant.getConcatSql(list, rs.getDBType());
						
						List<String> list1 = new ArrayList<String>();
						list1.add("CURDATE()");
						list1.add("' 00:00:00'");
						String sqlConcat1 = CommonConstant.getConcatSql(list1, rs.getDBType());
						
						sqlwhereTemp = " and( TIMESTAMPDIFF(SECOND,"+sqlConcat+",now())>=("+baseSecondsStr+") and TIMESTAMPDIFF(SECOND,"+sqlConcat+","+sqlConcat1+")<="+baseSecondsStr+" and "+isnullFun+"("+datetimeStr+",'')<>''  ) ";
					 }else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
						if(!needAdd){
							baseSecondsStr = "0";
						}
	
						if("gs".equals(orgindbtype)){
							List<String> list = new ArrayList<String>();
							list.add(""+datetimeStr+"");
							String sqlConcat = CommonConstant.getConcatSql(list,orgindbtype);
							List<String> list1 = new ArrayList<String>();
							list1.add(""+currentdate+"");
							list1.add("' '");
							list1.add("'00:00:00'");
							String sqlConcat1 = CommonConstant.getConcatSql(list1, orgindbtype);
							List<String> list2 = new ArrayList<String>();
							list2.add(""+datetimeStr+"");
							String sqlConcat2 = CommonConstant.getConcatSql(list2, orgindbtype);
							sqlwhereTemp = " and ((sysdate - To_date("+sqlConcat+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+sqlConcat1+", 'yyyy-mm-dd hh24:mi:ss')-To_date("+sqlConcat2+" , 'yyyy-mm-dd hh24:mi:ss')) * 24 * 60 * 60 <"+baseSecondsStr+" and "+datetimeStr+" is not null  ) ";
						}else{
							//当前时间 > 到期时间 > 今天凌晨0点的时间
							sqlwhereTemp = " and ((sysdate - To_date("+datetimeStr+" , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 >"+baseSecondsStr+" and (To_date("+currentdate+"||' 00:00:00' , 'yyyy-mm-dd hh24-mi-ss')-To_date("+datetimeStr+" , 'yyyy-mm-dd hh24-mi-ss')) * 24 * 60 * 60 <"+baseSecondsStr+" and "+datetimeStr+" is not null  ) ";
						}
					}
				}
			}
			if(!StringHelper.isEmpty(sqlwhereTemp)){
				JSONObject jsonObject = new JSONObject();
			//	sqlwhereTemp.replace("'", "''");
					jsonObject.put("dbtype", dbtype);
			//	sqlwhereTemp = sqlwhereTemp.replace("'", "''");
				jsonObject.put("sqlwhere", sqlwhereTemp);
				String sql1 = "update mode_timedtask_detail set sqlwherejson=? where id=?";
				rs1.executeUpdate(sql1,jsonObject.toString(),id);

			}
		}
	}
	
	public String getDqtxSqlwhere(Map remindJob,String fieldname){
		RecordSet rs = new RecordSet();
		String taskdetailid = Util.null2String(remindJob.get("id"));//
		String formtype = Util.null2String(remindJob.get("formtype"));
		String modeid = Util.null2String(remindJob.get("modeid"));
		String tablename = "";
		int formid = 0;
		String sqlStr = "select b.tablename,a.formid from modeinfo a,workflow_bill b where a.id="+modeid+" and a.formid=b.id";
		rs.executeSql(sqlStr);
		if(rs.next()){
			tablename = rs.getString("tablename");
			formid = Util.getIntValue(rs.getString("formid"), 0);
		}
		// 判断是否为 虚拟表单;
        String vdatasource = ""; // 虚拟表单数据源
        String vdatasourceDBtype = ""; // 数据库类型
        String vprimarykey="";
        boolean isvirtualform = VirtualFormHandler.isVirtualForm(formid);
        Map<String, Object> vFormInfo = new HashMap<String, Object>();
        if (isvirtualform) {
            vFormInfo = VirtualFormHandler.getVFormInfo(formid);
            tablename = VirtualFormHandler.getRealFromName(tablename);
            String vformtype = Util.null2String(vFormInfo.get("vformtype"));
            String vsql = Util.null2String(vFormInfo.get("vsql"));
            if("2".equals(vformtype)){
            	tablename="("+vsql+")";
            }
            vdatasource = Util.null2String(vFormInfo.get("vdatasource")); // 虚拟表单数据源
            DataSourceXML dataSourceXML = new DataSourceXML();
            vprimarykey = Util.null2String(vFormInfo.get("vprimarykey"));
            vdatasourceDBtype = dataSourceXML.getDataSourceDBType(vdatasource);
        } else {
            vdatasourceDBtype = rs.getDBType();
        }
		//检验条件
		String sqlwhere = "";
		String conditionstype = Util.null2String(remindJob.get("conditionstype"));
		if(conditionstype.equals("1")){//字段
			String conditionsfield = Util.null2String(remindJob.get("conditionsfield"));
			if(!conditionsfield.equals("")){
				sqlwhere = " and ("+conditionsfield+") ";
			}
		}else if(conditionstype.equals("2")){//sql
			String conditionssql = Util.null2String(remindJob.get("conditionssql"));
			if(!conditionssql.equals("")){
				sqlwhere = " and ("+conditionssql+") ";
			}
		}

		//过滤草稿状态的数据
		ModeSetUtil modeSet = new ModeSetUtil();
		Boolean isHave = modeSet.isHaveModedatastatusByformid(Integer.valueOf(formid));
		if(isHave){
			sqlwhere = sqlwhere + " and (t1.modedatastatus = 0)";
		}
		
		String sqlwherestr = "";
		String sqlwherejson = Util.null2String(remindJob.get("sqlwherejson"));
		boolean flag = false;
		if(StringHelper.isEmpty(sqlwherejson)){
			flag = true;
		}
		if(!flag){
			try {
				JSONObject jsonObject = JSONObject.fromObject(sqlwherejson);
				String dbtype = jsonObject.getString("dbtype");
				sqlwherestr = jsonObject.getString("sqlwhere");
				if(!dbtype.equals(rs.getDBType())){
					flag = true;
				}
			} catch (Exception e) {
				flag = true;
				writeLog(e);
			}
		}
		if(flag){
			castDqtx2Sqlwhere(taskdetailid);
			RemindJobService remindJobService = new RemindJobService();
			remindJob = remindJobService.getTaskDetailById(Util.getIntValue(taskdetailid));
			sqlwherejson = Util.null2String(remindJob.get("sqlwherejson"));
			if(!StringHelper.isEmpty(sqlwherejson)){
				JSONObject jsonObject = JSONObject.fromObject(sqlwherejson);
				sqlwherestr = jsonObject.getString("sqlwhere");
			}
			
		}
		sqlwhere += sqlwherestr;

		String currentdatestr = "";
		if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
			currentdatestr = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
		}else if("mysql".equals(vdatasourceDBtype)){
			currentdatestr = " CURDATE() ";//格式为2017-01-01的字符串
		}else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
			currentdatestr = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
		}
		
		String isnullFun = "isnull";
        if(vdatasourceDBtype.equals("oracle")||vdatasourceDBtype.indexOf("oracle")!=-1){
            isnullFun = "nvl";
        }else if (vdatasourceDBtype.equals("mysql")) {
            isnullFun = "ifnull";
        }
		String where = " and not exists(select 1 from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and t2.billid=t1.id  and "+isnullFun+"("+fieldname+",0)=1 and lastdate="+currentdatestr+" )";
		if(Util.getIntValue(formtype)>0){
			where = " and not exists(select 1 from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and t2.billid=t1.id and t2.subbillid=d1.id  and "+isnullFun+"("+fieldname+",0)=1  and lastdate="+currentdatestr+")";
		}
		if(isvirtualform){
            String isnull="isnull";
            String currentdatestr2="";
            if("sqlserver".equals(rs.getDBType())){
                currentdatestr2 = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
                isnull = "isnull";
            }else if("oracle".equals(rs.getDBType())){
                isnull = "nvl";
                currentdatestr2 = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
            }else if ("mysql".equals(rs.getDBType())) {
                currentdatestr2 = " DATE_FORMAT(NOW(),'%Y-%m-%d') ";// 格式为2017-01-01的字符串
                isnull = "ifnull";
            }

			rs.executeQuery("select billid from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and lastdate="+currentdatestr2+" and "+isnull+"("+fieldname+",0)=1");
			where = "" ;
			List  billids = new ArrayList<String>();
			while(rs.next()){
				String billid=rs.getString("billid");
				billids.add(billid);
			}

			String[] billidwhere = constructSql_in(billids);
			if(billidwhere.length>0){
				for(int i=0;i<billidwhere.length;i++){
					if(!"".equals(billidwhere[i])){
						if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
							where +="and convert(varchar(100),t1."+vprimarykey+") "+billidwhere[i];
						}else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
							where +="and to_char( t1."+vprimarykey+" ) "+billidwhere[i];
						}else if ("mysql".equals(vdatasourceDBtype)) {
							where +="and cast(t1."+vprimarykey+" AS CHAR) "+billidwhere[i];
						}
					}
				}
			}
        }
        sqlwhere = sqlwhere+where+" and "+Math.random()+">-1 ";
		String sql = "";
		if (isvirtualform) {
            sql = "select t1.* from  " + tablename + " t1 where 1=1 " + sqlwhere;
        } else {
    		if(!formtype.equals("0")&& !formtype.equals("")){
    			sql = "select t1.*,d1.id as subbillid,d1.* from "+tablename+" t1 left join  "+tablename+"_dt"+formtype+" d1 on t1.id = d1.mainid where  t1.formmodeid="+modeid+" and d1.mainid is not null "+sqlwhere;
    		}else{				
    			sql = "select t1.* from  "+tablename+" t1 where t1.formmodeid="+modeid+" "+sqlwhere;				
    		}
        }
		return sql;
	}
	
	/**
	 * 分页获取
	 * @param remindJob
	 * @param fieldname
	 * @return
	 */
	public SplitPageUtil getDqtxSqlwhereForSplit(Map remindJob,String fieldname){
		RecordSet rs = new RecordSet();
		String taskdetailid = Util.null2String(remindJob.get("id"));//
		String formtype = Util.null2String(remindJob.get("formtype"));
		String modeid = Util.null2String(remindJob.get("modeid"));
		String tablename = "";
		int formid = 0;
		String sqlStr = "select b.tablename,a.formid from modeinfo a,workflow_bill b where a.id="+modeid+" and a.formid=b.id";
		rs.executeSql(sqlStr);
		if(rs.next()){
			tablename = rs.getString("tablename");
			formid = Util.getIntValue(rs.getString("formid"), 0);
		}
		// 判断是否为 虚拟表单;
        String vdatasource = ""; // 虚拟表单数据源
        String vdatasourceDBtype = ""; // 数据库类型
        String primarykey="id";
        boolean isvirtualform = VirtualFormHandler.isVirtualForm(formid);
        Map<String, Object> vFormInfo = new HashMap<String, Object>();
        if (isvirtualform) {
            vFormInfo = VirtualFormHandler.getVFormInfo(formid);
            tablename = VirtualFormHandler.getRealFromName(tablename);
            String vformtype = Util.null2String(vFormInfo.get("vformtype"));
            String vsql = Util.null2String(vFormInfo.get("vsql"));
            if("2".equals(vformtype)){
            	tablename="("+vsql+")";
            }
            vdatasource = Util.null2String(vFormInfo.get("vdatasource")); // 虚拟表单数据源
            DataSourceXML dataSourceXML = new DataSourceXML();
            primarykey = Util.null2String(vFormInfo.get("vprimarykey"));
            vdatasourceDBtype = dataSourceXML.getDataSourceDBType(vdatasource);
        } else {
            vdatasourceDBtype = rs.getDBType();
        }
		//检验条件
		String sqlwhere = "";
		String conditionstype = Util.null2String(remindJob.get("conditionstype"));
		if(conditionstype.equals("1")){//字段
			String conditionsfield = Util.null2String(remindJob.get("conditionsfield"));
			if(!conditionsfield.equals("")){
				sqlwhere = " and ("+conditionsfield+") ";
			}
		}else if(conditionstype.equals("2")){//sql
			String conditionssql = Util.null2String(remindJob.get("conditionssql"));
			if(!conditionssql.equals("")){
				sqlwhere = " and ("+conditionssql+") ";
			}
		}

		//过滤草稿状态的数据
		ModeSetUtil modeSet = new ModeSetUtil();
		Boolean isHave = modeSet.isHaveModedatastatusByformid(Integer.valueOf(formid));
		if(isHave){
			sqlwhere = sqlwhere + " and (t1.modedatastatus = 0)";
		}
		
		String sqlwherestr = "";
		String sqlwherejson = Util.null2String(remindJob.get("sqlwherejson"));
		boolean flag = false;
		if(StringHelper.isEmpty(sqlwherejson)){
			flag = true;
		}
		if(!flag){
			try {
				JSONObject jsonObject = JSONObject.fromObject(sqlwherejson);
				String dbtype = jsonObject.getString("dbtype");
				sqlwherestr = jsonObject.getString("sqlwhere");
				if(!dbtype.equals(rs.getDBType())){
					flag = true;
				}
			} catch (Exception e) {
				flag = true;
				writeLog(e);
			}
		}
		if(flag){
			castDqtx2Sqlwhere(taskdetailid);
			RemindJobService remindJobService = new RemindJobService();
			remindJob = remindJobService.getTaskDetailById(Util.getIntValue(taskdetailid));
			sqlwherejson = Util.null2String(remindJob.get("sqlwherejson"));
			if(!StringHelper.isEmpty(sqlwherejson)){
				JSONObject jsonObject = JSONObject.fromObject(sqlwherejson);
				sqlwherestr = jsonObject.getString("sqlwhere");
			}
			
		}
		sqlwhere += sqlwherestr;

		String currentdatestr = "";
		if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
			currentdatestr = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
		}else if("mysql".equals(vdatasourceDBtype)){
			currentdatestr = " CURDATE() ";//格式为2017-01-01的字符串
		}else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
			currentdatestr = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
		}

		String isnullFun = "isnull";
        if(vdatasourceDBtype.equals("oracle")||vdatasourceDBtype.indexOf("oracle")!=-1){
            isnullFun = "nvl";
        }else if (vdatasourceDBtype.equals("mysql")) {
            isnullFun = "ifnull";
        }
		String where = " and not exists(select 1 from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and t2.billid=t1.id  and "+isnullFun+"("+fieldname+",0)=1  and lastdate="+currentdatestr+")";
		if(Util.getIntValue(formtype)>0){
			where = " and not exists(select 1 from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and t2.billid=t1.id and t2.subbillid=d1.id  and "+isnullFun+"("+fieldname+",0)=1 and lastdate="+currentdatestr+")";
		}
		if(isvirtualform){
            String isnull="isnull";
            String currentdatestr2="";
            if("sqlserver".equals(rs.getDBType())){
                currentdatestr2 = " CONVERT(varchar(10), GETDATE(), 120) ";//格式为2017-01-01的字符串
                isnull = "isnull";
            }else if("oracle".equals(rs.getDBType())){
                isnull = "nvl";
                currentdatestr2 = " to_char(sysdate,'yyyy-mm-dd') ";//格式为2017-01-01的字符串
            }else if ("mysql".equals(rs.getDBType())) {
                currentdatestr2 = " DATE_FORMAT(NOW(),'%Y-%m-%d') ";// 格式为2017-01-01的字符串
                isnull = "ifnull";
            }

			rs.executeQuery("select billid from mode_reminddata_all t2 where t2.taskdetailid="+taskdetailid+" and lastdate="+currentdatestr2+" and "+isnull+"("+fieldname+",0)=1");
			where = "" ;
			List  billids = new ArrayList<String>();
			while(rs.next()){
				String billid=rs.getString("billid");
				billids.add(billid);
			}

			String[] billidwhere = constructSql_in(billids);
			if(billidwhere.length>0){
				for(int i=0;i<billidwhere.length;i++){
					if(!"".equals(billidwhere[i])){
						if("sqlserver".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("sqlserver")!=-1){
							where +="and convert(varchar(100),t1."+primarykey+") "+billidwhere[i];
						}else if("oracle".equals(vdatasourceDBtype)||vdatasourceDBtype.indexOf("oracle")!=-1){
							where +="and to_char( t1."+primarykey+" ) "+billidwhere[i];
						}else if ("mysql".equals(vdatasourceDBtype)) {
							where +="and cast(t1."+primarykey+" AS CHAR) "+billidwhere[i];
						}
					}
				}
			}
        }
        sqlwhere = sqlwhere+where+" and "+Math.random()+">-1 ";
        String backfield="";
        String sqlfrom="";
		String sql = "";
		if (isvirtualform) {
			backfield="t1.*";
			sqlfrom=tablename+" t1";
			sqlwhere=" 1=1 "+sqlwhere;
//            sql = "select t1.* from  " + tablename + " t1 where 1=1 " + sqlwhere;
        } else {
    		if(!formtype.equals("0")&& !formtype.equals("")){
    			backfield="t1.*,d1.id as subbillid";
    			sqlfrom=tablename+" t1 left join  "+tablename+"_dt"+formtype+" d1 on t1.id = d1.mainid ";
    			sqlwhere="t1.formmodeid="+modeid+" "+sqlwhere;
//    			sql = "select t1.*,d1.id as subbillid,d1.* from "+tablename+" t1 left join  "+tablename+"_dt"+formtype+" d1 on t1.id = d1.mainid where  t1.formmodeid="+modeid+" "+sqlwhere;
    		}else{	
    			backfield="t1.*";
    			sqlfrom=tablename+" t1";
    			sqlwhere="t1.formmodeid="+modeid+" "+sqlwhere;	
//    			sql = "select t1.* from  "+tablename+" t1 where t1.formmodeid="+modeid+" "+sqlwhere;				
    		}
        }
		SplitPageUtil spu = new SplitPageUtil();
		SplitPageParaBean spp = new SplitPageParaBean();
		spp.setBackFields(backfield);// t1.id,t1.formmodeid
        spp.setDistinct(false);//false
        spp.setPrimaryKey("t1."+primarykey);//t1.id
        spp.setSqlFrom(sqlfrom);// 
        spp.setSqlWhere(sqlwhere);
        spp.setCountColumns(primarykey);	//统计项
        spp.setPoolname(vdatasource);//""
        spu.setSpp(spp);
        spp.setIsPrintExecuteSql(true);
        spp.setReturnDecryptData(true);
		return spu;
	}

	public Map<String,Object> saveMsgCenterType(HttpServletRequest request,User user){
		String msgCenterType =  Util.null2String(request.getParameter("msgCenterType"));
		FormManager formManager = new FormManager();
		RecordSetTrans rsTrans = new RecordSetTrans();
		RecordSet rs  = new RecordSet();
		int namelabelid = formManager.getNewIndexId(rsTrans);//生成新的标签id
		if(msgCenterType.indexOf(GCONST.LANG_CONTENT_PREFIX)>-1){
			Map<String,String> namelabelMap =  Util.splitMultilangData(msgCenterType);
			Iterator<String> nameIterator = namelabelMap.keySet().iterator();
			String namelabelstr = namelabelMap.get("7");
			rs.executeSql("delete from HtmlLabelIndex where id="+namelabelid);
			rs.executeSql("delete from HtmlLabelInfo where indexid="+namelabelid);
			rs.executeSql(" insert into HtmlLabelIndex(id,indexdesc)  values("+namelabelid+",'"+namelabelstr+"')");
			while (nameIterator.hasNext()){
				String namelabelLang = nameIterator.next();
				String namelabel = Util.null2String(namelabelMap.get(namelabelLang));
				rs.executeSql(" insert into HtmlLabelInfo(INDEXID,labelname, LANGUAGEID)  values("+namelabelid+",'"+namelabel+"',"+namelabelLang+")");
			}
			rs.executeSql("insert into formmode_msgcenter_typeinfo(typelabel) values("+namelabelid+")");
		}else{
			rs.executeSql("delete from HtmlLabelIndex where id="+namelabelid);
			rs.executeSql("delete from HtmlLabelInfo where indexid="+namelabelid);
			rs.executeSql(" insert into HtmlLabelIndex(id,indexdesc)  values("+namelabelid+",'"+msgCenterType+"')");
			rs.executeSql(" insert into HtmlLabelInfo(INDEXID,labelname, LANGUAGEID)  values("+namelabelid+",'"+msgCenterType+"',7)");
			rs.executeSql("insert into formmode_msgcenter_typeinfo(typelabel) values("+namelabelid+")");
		}

		Map<String,Object> returnValue = new HashMap<>();
		JSONArray msgcenter_typeOptionArray = new JSONArray();
		rs.executeQuery("select * from formmode_msgcenter_typeinfo order by id");
		while(rs.next()){
			com.alibaba.fastjson.JSONObject msgcenter_typeOption = new com.alibaba.fastjson.JSONObject();
			int typeId = rs.getInt("id");
			int typeLabel = rs.getInt("typelabel");
			String typeName = SystemEnv.getHtmlLabelName(typeLabel,user.getLanguage());
			msgcenter_typeOption.put("key",typeId+"");
			msgcenter_typeOption.put("label",typeName);
			msgcenter_typeOption.put("showname",typeName);
			msgcenter_typeOption.put("selected",false);
			msgcenter_typeOptionArray.add(msgcenter_typeOption);
		}
		returnValue.put("data", msgcenter_typeOptionArray);
		return returnValue;
	}

	public Map<String,Object> deleteMsgCenterType(HttpServletRequest request,User user){
		String msgCenterType =  Util.null2String(request.getParameter("msgCenterType"));
		RecordSet rs  = new RecordSet();
		rs.executeSql("delete from formmode_msgcenter_typeinfo where id="+msgCenterType);
		Map<String,Object> returnValue = new HashMap<>();
		JSONArray msgcenter_typeOptionArray = new JSONArray();
		rs.executeQuery("select * from formmode_msgcenter_typeinfo order by id");
		while(rs.next()){
			JSONObject msgcenter_typeOption = new JSONObject();
			int typeId = rs.getInt("id");
			int typeLabel = rs.getInt("typelabel");
			String typeName = SystemEnv.getHtmlLabelName(typeLabel,user.getLanguage());
			msgcenter_typeOption.put("key",typeId+"");
			msgcenter_typeOption.put("label",typeName);
			msgcenter_typeOption.put("showname",typeName);
			msgcenter_typeOption.put("selected",false);
			msgcenter_typeOptionArray.add(msgcenter_typeOption);
		}
		returnValue.put("data", msgcenter_typeOptionArray);
		return returnValue;
	}
	public  String[] constructSql_in(List billids){//数据数量每逢1000进行分开存放进数组，拼接时每1000个拼接一次
		String sql="";
		int num=billids.size()/1000+1;
		String[] subSql=new String[num];
		for(int n=0;n<num;n++){
			String subCompanyIds = "";
			for(int i=1000*n;i<(1000*n+1000)&&i<billids.size();i++){
				if(i%1000==0){
					subCompanyIds += "'"+billids.get(i)+"'";
				}else{
					subCompanyIds += ",'"+billids.get(i)+"'";
				}
			}
			subSql[n]="".equals(subCompanyIds)?"":" not in ("+subCompanyIds+") ";
		}
		return subSql;
	}
	
	public int getBillid() {
		return billid;
	}

	public void setBillid(int billid) {
		this.billid = billid;
	}

	public int getModeid() {
		return modeid;
	}

	public void setModeid(int modeid) {
		this.modeid = modeid;
	}

	public String getAction() {
		return action;
	}
	public int getExpandid() {
		return expandid;
	}

	public void setExpandid(int expandid) {
		this.expandid = expandid;
	}
	public void setAction(String action) {
		this.action = action;
	}

	public void setBillidVirtual(String billidVirtual) {
		this.billidVirtual = billidVirtual;
	}
	
	public User getCurrentUser() {
		return currentUser;
	}

	public void setCurrentUser(User currentUser) {
		this.currentUser = currentUser;
	}
	
	public List<String> getRunTimeTaskList(){
		return runTimeTaskList;
	}

	public boolean isKtreeReply() {
		return isKtreeReply;
	}

	public void setKtreeReply(boolean isKtreeReply) {
		this.isKtreeReply = isKtreeReply;
	}

	/**
	 *
	 * @param objids
	 * @param flagDeptOrCom 1 部门 2 分部 3 岗位
	 * @return
	 */
	public String getDeptOrCompany(String objids, String flagDeptOrCom) {
		String rs = "";
		ResourceComInfo rc = null;
		try {
			rc = new ResourceComInfo();
			if ("1".equals(flagDeptOrCom)) {//部门
				if (!"".equals(objids)) {
					String[] deptArr = objids.split(",");
					if (null != deptArr && deptArr.length > 0) {
						for (int i = 0; i < deptArr.length; i++) {
							String temp = rc.getDepartmentID(deptArr[i]);
							if (!"".equals(temp)) {
								rs +=  temp+"," ;
							}


						}
					}
				}

			} else if("2".equals(flagDeptOrCom)){// 分部
				if (!"".equals(objids)) {
					String[] deptArr = objids.split(",");
					if (null != deptArr && deptArr.length > 0) {
						for (int i = 0; i < deptArr.length; i++) {
							String temp = rc.getSubCompanyID(deptArr[i]);
							if (!"".equals(temp)) {
								rs +=  temp+"," ;
							}
						}
					}
				}
			}else if("3".equals(flagDeptOrCom)){// 岗位
				if (!"".equals(objids)) {
					String[] deptArr = objids.split(",");
					if (null != deptArr && deptArr.length > 0) {
						for (int i = 0; i < deptArr.length; i++) {
							String temp = rc.getJobTitle(deptArr[i]);
							if (!"".equals(temp)) {
								rs +=  temp+"," ;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(!"".equals(rs)){
			rs =rs.substring(0,rs.length()-1);
		}
		return rs;
	}
}